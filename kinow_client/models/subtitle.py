# coding: utf-8

"""
    Server API

    Reference for Server API (REST/Json)

    OpenAPI spec version: 2.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Subtitle(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, src=None, srclang=None, name=None, font=None, size=None, color=None, text_shadow=None, background=None, opacity=None, italic_color=None):
        """
        Subtitle - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'src': 'str',
            'srclang': 'str',
            'name': 'str',
            'font': 'str',
            'size': 'float',
            'color': 'str',
            'text_shadow': 'str',
            'background': 'str',
            'opacity': 'int',
            'italic_color': 'bool'
        }

        self.attribute_map = {
            'id': 'id',
            'src': 'src',
            'srclang': 'srclang',
            'name': 'name',
            'font': 'font',
            'size': 'size',
            'color': 'color',
            'text_shadow': 'text_shadow',
            'background': 'background',
            'opacity': 'opacity',
            'italic_color': 'italic_color'
        }

        self._id = id
        self._src = src
        self._srclang = srclang
        self._name = name
        self._font = font
        self._size = size
        self._color = color
        self._text_shadow = text_shadow
        self._background = background
        self._opacity = opacity
        self._italic_color = italic_color

    @property
    def id(self):
        """
        Gets the id of this Subtitle.

        :return: The id of this Subtitle.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Subtitle.

        :param id: The id of this Subtitle.
        :type: int
        """

        self._id = id

    @property
    def src(self):
        """
        Gets the src of this Subtitle.

        :return: The src of this Subtitle.
        :rtype: str
        """
        return self._src

    @src.setter
    def src(self, src):
        """
        Sets the src of this Subtitle.

        :param src: The src of this Subtitle.
        :type: str
        """

        self._src = src

    @property
    def srclang(self):
        """
        Gets the srclang of this Subtitle.

        :return: The srclang of this Subtitle.
        :rtype: str
        """
        return self._srclang

    @srclang.setter
    def srclang(self, srclang):
        """
        Sets the srclang of this Subtitle.

        :param srclang: The srclang of this Subtitle.
        :type: str
        """

        self._srclang = srclang

    @property
    def name(self):
        """
        Gets the name of this Subtitle.

        :return: The name of this Subtitle.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Subtitle.

        :param name: The name of this Subtitle.
        :type: str
        """

        self._name = name

    @property
    def font(self):
        """
        Gets the font of this Subtitle.

        :return: The font of this Subtitle.
        :rtype: str
        """
        return self._font

    @font.setter
    def font(self, font):
        """
        Sets the font of this Subtitle.

        :param font: The font of this Subtitle.
        :type: str
        """

        self._font = font

    @property
    def size(self):
        """
        Gets the size of this Subtitle.

        :return: The size of this Subtitle.
        :rtype: float
        """
        return self._size

    @size.setter
    def size(self, size):
        """
        Sets the size of this Subtitle.

        :param size: The size of this Subtitle.
        :type: float
        """

        self._size = size

    @property
    def color(self):
        """
        Gets the color of this Subtitle.

        :return: The color of this Subtitle.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """
        Sets the color of this Subtitle.

        :param color: The color of this Subtitle.
        :type: str
        """

        self._color = color

    @property
    def text_shadow(self):
        """
        Gets the text_shadow of this Subtitle.

        :return: The text_shadow of this Subtitle.
        :rtype: str
        """
        return self._text_shadow

    @text_shadow.setter
    def text_shadow(self, text_shadow):
        """
        Sets the text_shadow of this Subtitle.

        :param text_shadow: The text_shadow of this Subtitle.
        :type: str
        """

        self._text_shadow = text_shadow

    @property
    def background(self):
        """
        Gets the background of this Subtitle.

        :return: The background of this Subtitle.
        :rtype: str
        """
        return self._background

    @background.setter
    def background(self, background):
        """
        Sets the background of this Subtitle.

        :param background: The background of this Subtitle.
        :type: str
        """

        self._background = background

    @property
    def opacity(self):
        """
        Gets the opacity of this Subtitle.

        :return: The opacity of this Subtitle.
        :rtype: int
        """
        return self._opacity

    @opacity.setter
    def opacity(self, opacity):
        """
        Sets the opacity of this Subtitle.

        :param opacity: The opacity of this Subtitle.
        :type: int
        """

        self._opacity = opacity

    @property
    def italic_color(self):
        """
        Gets the italic_color of this Subtitle.

        :return: The italic_color of this Subtitle.
        :rtype: bool
        """
        return self._italic_color

    @italic_color.setter
    def italic_color(self, italic_color):
        """
        Sets the italic_color of this Subtitle.

        :param italic_color: The italic_color of this Subtitle.
        :type: bool
        """

        self._italic_color = italic_color

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
