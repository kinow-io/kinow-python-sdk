# coding: utf-8

"""
    Server API

    Reference for Server API (REST/Json)

    OpenAPI spec version: 2.0.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UpdateCartRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id_customer=None, id_currency=None, id_lang=None):
        """
        UpdateCartRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id_customer': 'int',
            'id_currency': 'int',
            'id_lang': 'int'
        }

        self.attribute_map = {
            'id_customer': 'id_customer',
            'id_currency': 'id_currency',
            'id_lang': 'id_lang'
        }

        self._id_customer = id_customer
        self._id_currency = id_currency
        self._id_lang = id_lang

    @property
    def id_customer(self):
        """
        Gets the id_customer of this UpdateCartRequest.
        Customer ID to attach this Cart

        :return: The id_customer of this UpdateCartRequest.
        :rtype: int
        """
        return self._id_customer

    @id_customer.setter
    def id_customer(self, id_customer):
        """
        Sets the id_customer of this UpdateCartRequest.
        Customer ID to attach this Cart

        :param id_customer: The id_customer of this UpdateCartRequest.
        :type: int
        """

        self._id_customer = id_customer

    @property
    def id_currency(self):
        """
        Gets the id_currency of this UpdateCartRequest.
        Currency ID to use in Cart

        :return: The id_currency of this UpdateCartRequest.
        :rtype: int
        """
        return self._id_currency

    @id_currency.setter
    def id_currency(self, id_currency):
        """
        Sets the id_currency of this UpdateCartRequest.
        Currency ID to use in Cart

        :param id_currency: The id_currency of this UpdateCartRequest.
        :type: int
        """

        self._id_currency = id_currency

    @property
    def id_lang(self):
        """
        Gets the id_lang of this UpdateCartRequest.
        Language ID to use in Cart

        :return: The id_lang of this UpdateCartRequest.
        :rtype: int
        """
        return self._id_lang

    @id_lang.setter
    def id_lang(self, id_lang):
        """
        Sets the id_lang of this UpdateCartRequest.
        Language ID to use in Cart

        :param id_lang: The id_lang of this UpdateCartRequest.
        :type: int
        """

        self._id_lang = id_lang

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
