# coding: utf-8

"""
    Server API

    Reference for Server API (REST/Json)

    OpenAPI spec version: 2.0.7
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ProductAccessResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, id_customer=None, id_product=None, id_product_attribute=None, type=None, date_add=None, date_exp=None, cancel=None, recurring=None, active=None, message=None, id_order=None, date_renewal=None, payment_method=None, renewed=None):
        """
        ProductAccessResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'id_customer': 'int',
            'id_product': 'int',
            'id_product_attribute': 'int',
            'type': 'str',
            'date_add': 'str',
            'date_exp': 'str',
            'cancel': 'int',
            'recurring': 'int',
            'active': 'int',
            'message': 'str',
            'id_order': 'int',
            'date_renewal': 'str',
            'payment_method': 'str',
            'renewed': 'int'
        }

        self.attribute_map = {
            'id': 'id',
            'id_customer': 'id_customer',
            'id_product': 'id_product',
            'id_product_attribute': 'id_product_attribute',
            'type': 'type',
            'date_add': 'date_add',
            'date_exp': 'date_exp',
            'cancel': 'cancel',
            'recurring': 'recurring',
            'active': 'active',
            'message': 'message',
            'id_order': 'id_order',
            'date_renewal': 'date_renewal',
            'payment_method': 'payment_method',
            'renewed': 'renewed'
        }

        self._id = id
        self._id_customer = id_customer
        self._id_product = id_product
        self._id_product_attribute = id_product_attribute
        self._type = type
        self._date_add = date_add
        self._date_exp = date_exp
        self._cancel = cancel
        self._recurring = recurring
        self._active = active
        self._message = message
        self._id_order = id_order
        self._date_renewal = date_renewal
        self._payment_method = payment_method
        self._renewed = renewed

    @property
    def id(self):
        """
        Gets the id of this ProductAccessResponse.

        :return: The id of this ProductAccessResponse.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ProductAccessResponse.

        :param id: The id of this ProductAccessResponse.
        :type: int
        """

        self._id = id

    @property
    def id_customer(self):
        """
        Gets the id_customer of this ProductAccessResponse.

        :return: The id_customer of this ProductAccessResponse.
        :rtype: int
        """
        return self._id_customer

    @id_customer.setter
    def id_customer(self, id_customer):
        """
        Sets the id_customer of this ProductAccessResponse.

        :param id_customer: The id_customer of this ProductAccessResponse.
        :type: int
        """

        self._id_customer = id_customer

    @property
    def id_product(self):
        """
        Gets the id_product of this ProductAccessResponse.

        :return: The id_product of this ProductAccessResponse.
        :rtype: int
        """
        return self._id_product

    @id_product.setter
    def id_product(self, id_product):
        """
        Sets the id_product of this ProductAccessResponse.

        :param id_product: The id_product of this ProductAccessResponse.
        :type: int
        """

        self._id_product = id_product

    @property
    def id_product_attribute(self):
        """
        Gets the id_product_attribute of this ProductAccessResponse.

        :return: The id_product_attribute of this ProductAccessResponse.
        :rtype: int
        """
        return self._id_product_attribute

    @id_product_attribute.setter
    def id_product_attribute(self, id_product_attribute):
        """
        Sets the id_product_attribute of this ProductAccessResponse.

        :param id_product_attribute: The id_product_attribute of this ProductAccessResponse.
        :type: int
        """

        self._id_product_attribute = id_product_attribute

    @property
    def type(self):
        """
        Gets the type of this ProductAccessResponse.

        :return: The type of this ProductAccessResponse.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this ProductAccessResponse.

        :param type: The type of this ProductAccessResponse.
        :type: str
        """

        self._type = type

    @property
    def date_add(self):
        """
        Gets the date_add of this ProductAccessResponse.

        :return: The date_add of this ProductAccessResponse.
        :rtype: str
        """
        return self._date_add

    @date_add.setter
    def date_add(self, date_add):
        """
        Sets the date_add of this ProductAccessResponse.

        :param date_add: The date_add of this ProductAccessResponse.
        :type: str
        """

        self._date_add = date_add

    @property
    def date_exp(self):
        """
        Gets the date_exp of this ProductAccessResponse.

        :return: The date_exp of this ProductAccessResponse.
        :rtype: str
        """
        return self._date_exp

    @date_exp.setter
    def date_exp(self, date_exp):
        """
        Sets the date_exp of this ProductAccessResponse.

        :param date_exp: The date_exp of this ProductAccessResponse.
        :type: str
        """

        self._date_exp = date_exp

    @property
    def cancel(self):
        """
        Gets the cancel of this ProductAccessResponse.

        :return: The cancel of this ProductAccessResponse.
        :rtype: int
        """
        return self._cancel

    @cancel.setter
    def cancel(self, cancel):
        """
        Sets the cancel of this ProductAccessResponse.

        :param cancel: The cancel of this ProductAccessResponse.
        :type: int
        """

        self._cancel = cancel

    @property
    def recurring(self):
        """
        Gets the recurring of this ProductAccessResponse.

        :return: The recurring of this ProductAccessResponse.
        :rtype: int
        """
        return self._recurring

    @recurring.setter
    def recurring(self, recurring):
        """
        Sets the recurring of this ProductAccessResponse.

        :param recurring: The recurring of this ProductAccessResponse.
        :type: int
        """

        self._recurring = recurring

    @property
    def active(self):
        """
        Gets the active of this ProductAccessResponse.

        :return: The active of this ProductAccessResponse.
        :rtype: int
        """
        return self._active

    @active.setter
    def active(self, active):
        """
        Sets the active of this ProductAccessResponse.

        :param active: The active of this ProductAccessResponse.
        :type: int
        """

        self._active = active

    @property
    def message(self):
        """
        Gets the message of this ProductAccessResponse.

        :return: The message of this ProductAccessResponse.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this ProductAccessResponse.

        :param message: The message of this ProductAccessResponse.
        :type: str
        """

        self._message = message

    @property
    def id_order(self):
        """
        Gets the id_order of this ProductAccessResponse.

        :return: The id_order of this ProductAccessResponse.
        :rtype: int
        """
        return self._id_order

    @id_order.setter
    def id_order(self, id_order):
        """
        Sets the id_order of this ProductAccessResponse.

        :param id_order: The id_order of this ProductAccessResponse.
        :type: int
        """

        self._id_order = id_order

    @property
    def date_renewal(self):
        """
        Gets the date_renewal of this ProductAccessResponse.

        :return: The date_renewal of this ProductAccessResponse.
        :rtype: str
        """
        return self._date_renewal

    @date_renewal.setter
    def date_renewal(self, date_renewal):
        """
        Sets the date_renewal of this ProductAccessResponse.

        :param date_renewal: The date_renewal of this ProductAccessResponse.
        :type: str
        """

        self._date_renewal = date_renewal

    @property
    def payment_method(self):
        """
        Gets the payment_method of this ProductAccessResponse.

        :return: The payment_method of this ProductAccessResponse.
        :rtype: str
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """
        Sets the payment_method of this ProductAccessResponse.

        :param payment_method: The payment_method of this ProductAccessResponse.
        :type: str
        """

        self._payment_method = payment_method

    @property
    def renewed(self):
        """
        Gets the renewed of this ProductAccessResponse.

        :return: The renewed of this ProductAccessResponse.
        :rtype: int
        """
        return self._renewed

    @renewed.setter
    def renewed(self, renewed):
        """
        Sets the renewed of this ProductAccessResponse.

        :param renewed: The renewed of this ProductAccessResponse.
        :type: int
        """

        self._renewed = renewed

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
