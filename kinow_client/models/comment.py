# coding: utf-8

"""
    Server API

    Reference for Server API (REST/Json)

    OpenAPI spec version: 2.0.19
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Comment(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, type=None, id_item=None, id_customer=None, content=None, active=None, date_add=None, date_upd=None):
        """
        Comment - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'type': 'str',
            'id_item': 'int',
            'id_customer': 'int',
            'content': 'str',
            'active': 'bool',
            'date_add': 'str',
            'date_upd': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'type': 'type',
            'id_item': 'id_item',
            'id_customer': 'id_customer',
            'content': 'content',
            'active': 'active',
            'date_add': 'date_add',
            'date_upd': 'date_upd'
        }

        self._id = id
        self._type = type
        self._id_item = id_item
        self._id_customer = id_customer
        self._content = content
        self._active = active
        self._date_add = date_add
        self._date_upd = date_upd

    @property
    def id(self):
        """
        Gets the id of this Comment.

        :return: The id of this Comment.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Comment.

        :param id: The id of this Comment.
        :type: int
        """

        self._id = id

    @property
    def type(self):
        """
        Gets the type of this Comment.

        :return: The type of this Comment.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Comment.

        :param type: The type of this Comment.
        :type: str
        """

        self._type = type

    @property
    def id_item(self):
        """
        Gets the id_item of this Comment.

        :return: The id_item of this Comment.
        :rtype: int
        """
        return self._id_item

    @id_item.setter
    def id_item(self, id_item):
        """
        Sets the id_item of this Comment.

        :param id_item: The id_item of this Comment.
        :type: int
        """

        self._id_item = id_item

    @property
    def id_customer(self):
        """
        Gets the id_customer of this Comment.

        :return: The id_customer of this Comment.
        :rtype: int
        """
        return self._id_customer

    @id_customer.setter
    def id_customer(self, id_customer):
        """
        Sets the id_customer of this Comment.

        :param id_customer: The id_customer of this Comment.
        :type: int
        """

        self._id_customer = id_customer

    @property
    def content(self):
        """
        Gets the content of this Comment.

        :return: The content of this Comment.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """
        Sets the content of this Comment.

        :param content: The content of this Comment.
        :type: str
        """

        self._content = content

    @property
    def active(self):
        """
        Gets the active of this Comment.

        :return: The active of this Comment.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """
        Sets the active of this Comment.

        :param active: The active of this Comment.
        :type: bool
        """

        self._active = active

    @property
    def date_add(self):
        """
        Gets the date_add of this Comment.

        :return: The date_add of this Comment.
        :rtype: str
        """
        return self._date_add

    @date_add.setter
    def date_add(self, date_add):
        """
        Sets the date_add of this Comment.

        :param date_add: The date_add of this Comment.
        :type: str
        """

        self._date_add = date_add

    @property
    def date_upd(self):
        """
        Gets the date_upd of this Comment.

        :return: The date_upd of this Comment.
        :rtype: str
        """
        return self._date_upd

    @date_upd.setter
    def date_upd(self, date_upd):
        """
        Sets the date_upd of this Comment.

        :param date_upd: The date_upd of this Comment.
        :type: str
        """

        self._date_upd = date_upd

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
