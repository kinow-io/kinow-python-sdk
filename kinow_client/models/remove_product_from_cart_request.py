# coding: utf-8

"""
    Server API

    Reference for Server API (REST/Json)

    OpenAPI spec version: 2.0.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RemoveProductFromCartRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, product_id=None, product_attribute_id=None, gift_id=None):
        """
        RemoveProductFromCartRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'product_id': 'int',
            'product_attribute_id': 'int',
            'gift_id': 'int'
        }

        self.attribute_map = {
            'product_id': 'product_id',
            'product_attribute_id': 'product_attribute_id',
            'gift_id': 'gift_id'
        }

        self._product_id = product_id
        self._product_attribute_id = product_attribute_id
        self._gift_id = gift_id

    @property
    def product_id(self):
        """
        Gets the product_id of this RemoveProductFromCartRequest.
        Product ID to add to cart

        :return: The product_id of this RemoveProductFromCartRequest.
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """
        Sets the product_id of this RemoveProductFromCartRequest.
        Product ID to add to cart

        :param product_id: The product_id of this RemoveProductFromCartRequest.
        :type: int
        """
        if product_id is None:
            raise ValueError("Invalid value for `product_id`, must not be `None`")

        self._product_id = product_id

    @property
    def product_attribute_id(self):
        """
        Gets the product_attribute_id of this RemoveProductFromCartRequest.
        ProductAttribute ID, required to add product to cart if product is not a subscription

        :return: The product_attribute_id of this RemoveProductFromCartRequest.
        :rtype: int
        """
        return self._product_attribute_id

    @product_attribute_id.setter
    def product_attribute_id(self, product_attribute_id):
        """
        Sets the product_attribute_id of this RemoveProductFromCartRequest.
        ProductAttribute ID, required to add product to cart if product is not a subscription

        :param product_attribute_id: The product_attribute_id of this RemoveProductFromCartRequest.
        :type: int
        """

        self._product_attribute_id = product_attribute_id

    @property
    def gift_id(self):
        """
        Gets the gift_id of this RemoveProductFromCartRequest.
        Gift ID linked to the item in cart

        :return: The gift_id of this RemoveProductFromCartRequest.
        :rtype: int
        """
        return self._gift_id

    @gift_id.setter
    def gift_id(self, gift_id):
        """
        Sets the gift_id of this RemoveProductFromCartRequest.
        Gift ID linked to the item in cart

        :param gift_id: The gift_id of this RemoveProductFromCartRequest.
        :type: int
        """

        self._gift_id = gift_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
