# coding: utf-8

"""
    Server API

    Reference for Server API (REST/Json)

    OpenAPI spec version: 1.5.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class MediaFilesApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_media_file(self, media_file_id, **kwargs):
        """
        Get Media file
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_media_file(media_file_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int media_file_id: MediaFile ID to fetch (required)
        :return: MediaFileResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_media_file_with_http_info(media_file_id, **kwargs)
        else:
            (data) = self.get_media_file_with_http_info(media_file_id, **kwargs)
            return data

    def get_media_file_with_http_info(self, media_file_id, **kwargs):
        """
        Get Media file
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_media_file_with_http_info(media_file_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int media_file_id: MediaFile ID to fetch (required)
        :return: MediaFileResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['media_file_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_media_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'media_file_id' is set
        if ('media_file_id' not in params) or (params['media_file_id'] is None):
            raise ValueError("Missing the required parameter `media_file_id` when calling `get_media_file`")


        collection_formats = {}

        resource_path = '/media-files/{media_file_id}'.replace('{format}', 'json')
        path_params = {}
        if 'media_file_id' in params:
            path_params['media_file_id'] = params['media_file_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiClientId', 'ApiClientSecret']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='MediaFileResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_media_source_files(self, source_id, **kwargs):
        """
        Get media source files
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_media_source_files(source_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int source_id: Media source ID to fetch (required)
        :param int page:
        :param int per_page:
        :param str filters:  ``` name[value]=string&name][operator]=contains&date_add[value]=string&date_add[operator]=lt _______________  { \"name\": { \"value\": \"string\", \"operator\": \"contains\" }, \"date_add\": { \"value\": \"string\", \"operator\": \"lt\" } } ``` Operator can be: strict, contains, between, in, gt (greater than), lt (lower than).
        :param str sort_by: Sort by this attribute (id by default)
        :param str sort_direction: Sorting direction (asc by default)
        :return: MediaFileListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_media_source_files_with_http_info(source_id, **kwargs)
        else:
            (data) = self.get_media_source_files_with_http_info(source_id, **kwargs)
            return data

    def get_media_source_files_with_http_info(self, source_id, **kwargs):
        """
        Get media source files
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_media_source_files_with_http_info(source_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int source_id: Media source ID to fetch (required)
        :param int page:
        :param int per_page:
        :param str filters:  ``` name[value]=string&name][operator]=contains&date_add[value]=string&date_add[operator]=lt _______________  { \"name\": { \"value\": \"string\", \"operator\": \"contains\" }, \"date_add\": { \"value\": \"string\", \"operator\": \"lt\" } } ``` Operator can be: strict, contains, between, in, gt (greater than), lt (lower than).
        :param str sort_by: Sort by this attribute (id by default)
        :param str sort_direction: Sorting direction (asc by default)
        :return: MediaFileListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['source_id', 'page', 'per_page', 'filters', 'sort_by', 'sort_direction']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_media_source_files" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'source_id' is set
        if ('source_id' not in params) or (params['source_id'] is None):
            raise ValueError("Missing the required parameter `source_id` when calling `get_media_source_files`")


        collection_formats = {}

        resource_path = '/media-sources/{source_id}/files'.replace('{format}', 'json')
        path_params = {}
        if 'source_id' in params:
            path_params['source_id'] = params['source_id']

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'per_page' in params:
            query_params['per_page'] = params['per_page']
        if 'filters' in params:
            query_params['filters'] = params['filters']
        if 'sort_by' in params:
            query_params['sort_by'] = params['sort_by']
        if 'sort_direction' in params:
            query_params['sort_direction'] = params['sort_direction']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiClientId', 'ApiClientSecret']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='MediaFileListResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def post_media_source_files(self, source_id, body, **kwargs):
        """
        Post media file
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_media_source_files(source_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int source_id: Media source ID to fetch (required)
        :param CreateMediaFileRequest body: Create MediaFile object (required)
        :return: MediaFileResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.post_media_source_files_with_http_info(source_id, body, **kwargs)
        else:
            (data) = self.post_media_source_files_with_http_info(source_id, body, **kwargs)
            return data

    def post_media_source_files_with_http_info(self, source_id, body, **kwargs):
        """
        Post media file
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_media_source_files_with_http_info(source_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int source_id: Media source ID to fetch (required)
        :param CreateMediaFileRequest body: Create MediaFile object (required)
        :return: MediaFileResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['source_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_media_source_files" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'source_id' is set
        if ('source_id' not in params) or (params['source_id'] is None):
            raise ValueError("Missing the required parameter `source_id` when calling `post_media_source_files`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_media_source_files`")


        collection_formats = {}

        resource_path = '/media-sources/{source_id}/files'.replace('{format}', 'json')
        path_params = {}
        if 'source_id' in params:
            path_params['source_id'] = params['source_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        self.api_client.set_default_header('Content-Type', 'application/json')
        # Authentication setting
        auth_settings = ['ApiClientId', 'ApiClientSecret']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='MediaFileResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
