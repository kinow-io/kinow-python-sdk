# coding: utf-8

"""
    Server API

    Reference for Server API (REST/Json)

    OpenAPI spec version: 2.0.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class GiftsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def consume_gift(self, gift_id, customer_id, **kwargs):
        """
        Consume Gift
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consume_gift(gift_id, customer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int gift_id: Gift ID to fetch (required)
        :param int customer_id: Customer ID to fetch (required)
        :param str token: Gift token to check (optional)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.consume_gift_with_http_info(gift_id, customer_id, **kwargs)
        else:
            (data) = self.consume_gift_with_http_info(gift_id, customer_id, **kwargs)
            return data

    def consume_gift_with_http_info(self, gift_id, customer_id, **kwargs):
        """
        Consume Gift
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consume_gift_with_http_info(gift_id, customer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int gift_id: Gift ID to fetch (required)
        :param int customer_id: Customer ID to fetch (required)
        :param str token: Gift token to check (optional)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['gift_id', 'customer_id', 'token']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consume_gift" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'gift_id' is set
        if ('gift_id' not in params) or (params['gift_id'] is None):
            raise ValueError("Missing the required parameter `gift_id` when calling `consume_gift`")
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params) or (params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `consume_gift`")


        collection_formats = {}

        resource_path = '/gifts/{gift_id}/consume'.replace('{format}', 'json')
        path_params = {}
        if 'gift_id' in params:
            path_params['gift_id'] = params['gift_id']

        query_params = {}
        if 'customer_id' in params:
            query_params['customer_id'] = params['customer_id']
        if 'token' in params:
            query_params['token'] = params['token']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiClientId', 'ApiClientSecret']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_gift(self, body, **kwargs):
        """
        Create Gift
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_gift(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CreateGiftRequest body: Gift settings (required)
        :return: GiftResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_gift_with_http_info(body, **kwargs)
        else:
            (data) = self.create_gift_with_http_info(body, **kwargs)
            return data

    def create_gift_with_http_info(self, body, **kwargs):
        """
        Create Gift
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_gift_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CreateGiftRequest body: Gift settings (required)
        :return: GiftResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_gift" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_gift`")


        collection_formats = {}

        resource_path = '/gifts'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        self.api_client.set_default_header('Content-Type', 'application/json')
        # Authentication setting
        auth_settings = ['ApiClientId', 'ApiClientSecret']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GiftResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_gift(self, gift_id, **kwargs):
        """
        Delete Gift
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_gift(gift_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int gift_id: Gift ID to fetch (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_gift_with_http_info(gift_id, **kwargs)
        else:
            (data) = self.delete_gift_with_http_info(gift_id, **kwargs)
            return data

    def delete_gift_with_http_info(self, gift_id, **kwargs):
        """
        Delete Gift
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_gift_with_http_info(gift_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int gift_id: Gift ID to fetch (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['gift_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_gift" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'gift_id' is set
        if ('gift_id' not in params) or (params['gift_id'] is None):
            raise ValueError("Missing the required parameter `gift_id` when calling `delete_gift`")


        collection_formats = {}

        resource_path = '/gifts/{gift_id}'.replace('{format}', 'json')
        path_params = {}
        if 'gift_id' in params:
            path_params['gift_id'] = params['gift_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiClientId', 'ApiClientSecret']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_gifts_in_cart(self, cart_id, **kwargs):
        """
        Delete Gifts in cart
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_gifts_in_cart(cart_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int cart_id: Cart ID to fetch (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_gifts_in_cart_with_http_info(cart_id, **kwargs)
        else:
            (data) = self.delete_gifts_in_cart_with_http_info(cart_id, **kwargs)
            return data

    def delete_gifts_in_cart_with_http_info(self, cart_id, **kwargs):
        """
        Delete Gifts in cart
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_gifts_in_cart_with_http_info(cart_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int cart_id: Cart ID to fetch (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cart_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_gifts_in_cart" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cart_id' is set
        if ('cart_id' not in params) or (params['cart_id'] is None):
            raise ValueError("Missing the required parameter `cart_id` when calling `delete_gifts_in_cart`")


        collection_formats = {}

        resource_path = '/carts/{cart_id}/gift/'.replace('{format}', 'json')
        path_params = {}
        if 'cart_id' in params:
            path_params['cart_id'] = params['cart_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiClientId', 'ApiClientSecret']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_gift(self, gift_id, **kwargs):
        """
        Get Gift
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_gift(gift_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int gift_id: Gift ID to fetch (required)
        :return: GiftResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_gift_with_http_info(gift_id, **kwargs)
        else:
            (data) = self.get_gift_with_http_info(gift_id, **kwargs)
            return data

    def get_gift_with_http_info(self, gift_id, **kwargs):
        """
        Get Gift
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_gift_with_http_info(gift_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int gift_id: Gift ID to fetch (required)
        :return: GiftResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['gift_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_gift" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'gift_id' is set
        if ('gift_id' not in params) or (params['gift_id'] is None):
            raise ValueError("Missing the required parameter `gift_id` when calling `get_gift`")


        collection_formats = {}

        resource_path = '/gifts/{gift_id}'.replace('{format}', 'json')
        path_params = {}
        if 'gift_id' in params:
            path_params['gift_id'] = params['gift_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiClientId', 'ApiClientSecret']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GiftResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_gift_in_cart(self, cart_id, **kwargs):
        """
        Get Gift in Cart
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_gift_in_cart(cart_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int cart_id: Cart ID to fetch (required)
        :return: GiftResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_gift_in_cart_with_http_info(cart_id, **kwargs)
        else:
            (data) = self.get_gift_in_cart_with_http_info(cart_id, **kwargs)
            return data

    def get_gift_in_cart_with_http_info(self, cart_id, **kwargs):
        """
        Get Gift in Cart
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_gift_in_cart_with_http_info(cart_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int cart_id: Cart ID to fetch (required)
        :return: GiftResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cart_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_gift_in_cart" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cart_id' is set
        if ('cart_id' not in params) or (params['cart_id'] is None):
            raise ValueError("Missing the required parameter `cart_id` when calling `get_gift_in_cart`")


        collection_formats = {}

        resource_path = '/carts/{cart_id}/gift'.replace('{format}', 'json')
        path_params = {}
        if 'cart_id' in params:
            path_params['cart_id'] = params['cart_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiClientId', 'ApiClientSecret']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GiftResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_gift_token(self, gift_id, **kwargs):
        """
        Get Gift token
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_gift_token(gift_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int gift_id: Gift ID to fetch (required)
        :return: GiftTokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_gift_token_with_http_info(gift_id, **kwargs)
        else:
            (data) = self.get_gift_token_with_http_info(gift_id, **kwargs)
            return data

    def get_gift_token_with_http_info(self, gift_id, **kwargs):
        """
        Get Gift token
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_gift_token_with_http_info(gift_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int gift_id: Gift ID to fetch (required)
        :return: GiftTokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['gift_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_gift_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'gift_id' is set
        if ('gift_id' not in params) or (params['gift_id'] is None):
            raise ValueError("Missing the required parameter `gift_id` when calling `get_gift_token`")


        collection_formats = {}

        resource_path = '/gifts/{gift_id}/token'.replace('{format}', 'json')
        path_params = {}
        if 'gift_id' in params:
            path_params['gift_id'] = params['gift_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiClientId', 'ApiClientSecret']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GiftTokenResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_gifts(self, **kwargs):
        """
        Get Gifts
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_gifts(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool unused_only: Filter only unused gifts
        :param bool paid_only: Filter only gifts linked to an order which is paid by the user
        :param int page:
        :param int per_page:
        :return: GiftListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_gifts_with_http_info(**kwargs)
        else:
            (data) = self.get_gifts_with_http_info(**kwargs)
            return data

    def get_gifts_with_http_info(self, **kwargs):
        """
        Get Gifts
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_gifts_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool unused_only: Filter only unused gifts
        :param bool paid_only: Filter only gifts linked to an order which is paid by the user
        :param int page:
        :param int per_page:
        :return: GiftListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['unused_only', 'paid_only', 'page', 'per_page']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_gifts" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/gifts'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'unused_only' in params:
            query_params['unused_only'] = params['unused_only']
        if 'paid_only' in params:
            query_params['paid_only'] = params['paid_only']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'per_page' in params:
            query_params['per_page'] = params['per_page']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiClientId', 'ApiClientSecret']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GiftListResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_gifts_in_cart(self, cart_id, **kwargs):
        """
        Get Gifts in cart
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_gifts_in_cart(cart_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int cart_id: Cart ID to fetch (required)
        :return: GiftListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_gifts_in_cart_with_http_info(cart_id, **kwargs)
        else:
            (data) = self.get_gifts_in_cart_with_http_info(cart_id, **kwargs)
            return data

    def get_gifts_in_cart_with_http_info(self, cart_id, **kwargs):
        """
        Get Gifts in cart
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_gifts_in_cart_with_http_info(cart_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int cart_id: Cart ID to fetch (required)
        :return: GiftListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cart_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_gifts_in_cart" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cart_id' is set
        if ('cart_id' not in params) or (params['cart_id'] is None):
            raise ValueError("Missing the required parameter `cart_id` when calling `get_gifts_in_cart`")


        collection_formats = {}

        resource_path = '/carts/{cart_id}/gifts'.replace('{format}', 'json')
        path_params = {}
        if 'cart_id' in params:
            path_params['cart_id'] = params['cart_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiClientId', 'ApiClientSecret']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GiftListResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def send_gift(self, gift_id, **kwargs):
        """
        Send Gift
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.send_gift(gift_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int gift_id: Gift ID to fetch (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.send_gift_with_http_info(gift_id, **kwargs)
        else:
            (data) = self.send_gift_with_http_info(gift_id, **kwargs)
            return data

    def send_gift_with_http_info(self, gift_id, **kwargs):
        """
        Send Gift
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.send_gift_with_http_info(gift_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int gift_id: Gift ID to fetch (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['gift_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method send_gift" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'gift_id' is set
        if ('gift_id' not in params) or (params['gift_id'] is None):
            raise ValueError("Missing the required parameter `gift_id` when calling `send_gift`")


        collection_formats = {}

        resource_path = '/gifts/{gift_id}/send'.replace('{format}', 'json')
        path_params = {}
        if 'gift_id' in params:
            path_params['gift_id'] = params['gift_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiClientId', 'ApiClientSecret']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_gift(self, gift_id, body, **kwargs):
        """
        Update Gift
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_gift(gift_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int gift_id: Gift ID to fetch (required)
        :param UpdateGiftRequest body: Gift settings (required)
        :return: GiftResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_gift_with_http_info(gift_id, body, **kwargs)
        else:
            (data) = self.update_gift_with_http_info(gift_id, body, **kwargs)
            return data

    def update_gift_with_http_info(self, gift_id, body, **kwargs):
        """
        Update Gift
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_gift_with_http_info(gift_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int gift_id: Gift ID to fetch (required)
        :param UpdateGiftRequest body: Gift settings (required)
        :return: GiftResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['gift_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_gift" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'gift_id' is set
        if ('gift_id' not in params) or (params['gift_id'] is None):
            raise ValueError("Missing the required parameter `gift_id` when calling `update_gift`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_gift`")


        collection_formats = {}

        resource_path = '/gifts/{gift_id}'.replace('{format}', 'json')
        path_params = {}
        if 'gift_id' in params:
            path_params['gift_id'] = params['gift_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        self.api_client.set_default_header('Content-Type', 'application/json')
        # Authentication setting
        auth_settings = ['ApiClientId', 'ApiClientSecret']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GiftResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
